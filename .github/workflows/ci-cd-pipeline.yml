name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Triggers the pipeline when code is pushed to the main branch
  pull_request:
    branches:
      - main  # Triggers the pipeline when a pull request is made to the main branch

jobs:
  build_and_scan:
    runs-on: ubuntu-latest  # Runs the job on an Ubuntu runner

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx (for multi-platform builds)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to Docker Hub (or another container registry)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username stored as a secret
        password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password stored as a secret

    # Step 4: Build the Docker images for frontend and backend
    - name: Build frontend image
      run: |
        docker build -t my-frontend ./frontend  # Build frontend image
        docker tag my-frontend:latest yourdockerhubusername/my-frontend:latest  # Tag the image with the Docker Hub username

    - name: Build backend image
      run: |
        docker build -t my-backend ./backend  # Build backend image
        docker tag my-backend:latest yourdockerhubusername/my-backend:latest  # Tag the image with the Docker Hub username

    # Step 5: Run vulnerability scans for frontend and backend using Snyk
    - name: Run Snyk vulnerability scan for frontend
      run: snyk container test yourdockerhubusername/my-frontend:latest  # Scan the frontend image for vulnerabilities

    - name: Run Snyk vulnerability scan for backend
      run: snyk container test yourdockerhubusername/my-backend:latest  # Scan the backend image for vulnerabilities

    # Step 6: Push the images to Docker Hub (only if no vulnerabilities were found)
    - name: Push frontend image to Docker Hub
      if: success()  # If previous steps succeed, push the frontend image
      run: |
        docker push yourdockerhubusername/my-frontend:latest

    - name: Push backend image to Docker Hub
      if: success()  # If previous steps succeed, push the backend image
      run: |
        docker push yourdockerhubusername/my-backend:latest

  deploy:
    runs-on: ubuntu-latest  # Runs the deploy job on an Ubuntu runner
    needs: build_and_scan  # Ensure that the build and scan job has completed before deployment

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Deploy the application using Docker Compose
    - name: Deploy with Docker Compose
      run: |
        docker-compose -f docker-compose.yml up -d  # Use Docker Compose to deploy the app in detached mode
